(defn myfun [a b & rest] (a b rest))
(myfun 1 2 3)
(myfun 1 2 )
(defn myfun [a b & rest] (list a b rest))
(myfun 1 2 )
(myfun 1 2 3)
quit
(require '[task02.db :as db])
(require '[task02.query :as q])
(db/load-initial-data)
(db/insert student {:id 10 :surname "Test" :year 2000})
(def rs (q/perform-query "select student where id = 10"))
rs
(q/perform-query "select student where surname = 'Test'"))
quit
(require '[task02.db :as db])
(require '[task02.query :as q])
(db/load-initial-data)
(delete student :where (q/make-where-function "id" "=" "1"))
quit
(require '[[task02.db :as db] [task02.query :as q]])
(require '[[task02.db :as db] )
(require '[task02.db :as db])
(require '[task02.query :as q])
(db/load-initial-data)
(db/delete student :where (q/make-where-function "id" "=" "1"))
@student
(q/perform-query "select student where id = 1")
(count (q/perform-query "select student"))
quit
(defn chek2 #(= % 2))
(defn chek2 [num] #(= 2 num))
(filter chek2 [1 2 3 4 5 6 7])
(defn chek2 [num] (= 2 num))
(filter chek2 [1 2 3 4 5 6 7])
(defn uncheck2 [num] (not (check2 num)))
(defn uncheck2 [num] (not (chek2 num)))
(filter uncheck2 [1 2 3 4 5 6 7])
(filter #(= % 2) [1 2 3 4 5 6])
(filter (not (#(= % 2)) [1 2 3 4 5 6])
)
(filter (not (#(= % 2))) [1 2 3 4 5 6])
(filter (not (#(= % 2)) %) [1 2 3 4 5 6])
(filter #(not (#(= % 2)) %) [1 2 3 4 5 6])
(filter #(not (#(= % 2) %)) [1 2 3 4 5 6])
exit
(def upd-map {:id 5})
(let [{upd-key upd-value} upd-map] println upd-key upd-value)
(let [{upd-key upd-value} upd-map] (println upd-key upd-value))
exit
(accoc {:id 10 :year 2000 :surname "test"} {:id 5})
(assoc {:id 10 :year 2000 :surname "test"} {:id 5})
(merge {:id 10 :year 2000 :surname "test"} {:id 5})
exit
quit
(def my-list (list 1 2 3))
(concat my-list 4)
(concat my-list '(4))
(let [result rest] [1 2 3 4 5 6])
(let [result rest] [1 2 3 4 5 6] (print result)
)
(let [result rest] [1 2 3 4 5 6] (print result))
(let [[result rest] [1 2 3 4 5 6]] (print result))
(let [[result rest] [1 2 3 4 5 6]] (println result))
(concat [2 3 4] '(6))
(concat [2 3 4] [6])
bye
quit
(resolve (symbol "!="))
(symbol "=")
(symbol "!=")
(resolve =)
(resolve (symbol "="))
(resolve (symbol "=="))
(resolve (symbol ">="))
(resolve (symbol "<="))
(resolve (symbol "<"))
(resolve (symbol ">"))
(= 3 4 5)
(defn != [& x] (not (= x)))
(!= 3 4 5)
(= 3)
(not (= 3 4 5))
(!= 3)
(!= 4 4)
(!= 3 4)
(defn print-rest [& x] (print x))
(print-rest 4)
(defn print-rest [& x] x)
(print-rest 4)
(print-rest 4 5)
(print-rest 4 5 647 43 6)
(= (4 5 6 7))
(= '(4 5 6 7))
(apply = '(4 5 6 7))
(apply = '(4 4 4))
(defn != [& x] (not (apply = x)))
(!= 3)
(!= 3 4)
(!= 3 4 3)
(= 3 4 3)
(defn != [&x] (not (apply = x)))
(resolve (symbol "!="))
(ns-resolve (symbol "!="))
quit
